#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      build - Build the docker images for the project.
              You need to do this first, since the builds require
              a combination of Docker and S2I builds.
    
              You can build individual components as shown below, components that have dependencies
              will have these dependencies built too.
    
              Examples:
               - Build the api only.
    
                $0 build dcbr-api
    
              By default all containers that components comprise of, will be rebuilt.
    
                $0 build 
    
      up -  Creates the application containers from the built images
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.  
            By default all containers will be started.

            Examples:
            $0 start
            $0 start dcbr-db
            $0 start dcbr-api

      start - Same as up

      start-dev - Starts the containers in development mode, using hot-reload for dcbr-api and dcbr-web.

      makemigrations - Runs the makemigrations command for the django app (the database container needs to be running).

                      Examples:
                      - Create the initial migrations for a new module

                        $0 makemigrations <module-name>
                      
                      - Update migrations for all the modules in the project

                        $0 makemigrations

      migrate - Applies pending migrations to the database (the database container needs to be running).

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.
    
      down - Brings down the services and removes the volumes (storage) and containers.
      
      rm - Same as down
EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="dcbr-api dcbr-db schema-spy"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

build-schema-spy() {
  #
  # schema-spy
  #
  echo -e "\nBuilding schema-spy image ..."
  docker build \
    https://github.com/bcgov/SchemaSpy.git \
    -t 'schema-spy'
}

build-api() {
  #
  # dcbr-api
  #
  BASE_IMAGE="centos/python-36-centos7"
  echo -e "\nBuilding dcbr-api image from ${BASE_IMAGE}..."
  ${S2I_EXE} build \
    -e "UPGRADE_PIP_TO_LATEST=true" \
    -e "PIP_NO_CACHE_DIR=" \
    -v "${COMPOSE_PROJECT_NAME}_dcbr-pip-cache:/opt/app-root/.cache/pip" \
    '../dcbr-api' \
    "$BASE_IMAGE" \
    'dcbr-api'
}

build-web() {
  #
  # dcbr-web
  #
  echo -e "\nBuilding dcbr-web image..."
  docker build \
    -t 'dcbr-web' \
    -f '../docker/dcbr-web/Dockerfile' '../'
}

buildImages() {
  build-api
  build-schema-spy
  build-web
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-$KEYCLOAK_CLIENT_SECRET}

  if [ "$COMMAND" == "start" ]|| [ "$COMMAND" == "start-dev" ]; then
    if [ -z "$KEYCLOAK_CLIENT_SECRET" ]; then
      echo "You must provide a secret for your Keycloak clientseed parameter. For example: KEYCLOAK_CLIENT_SECRET=my-client-secret."
      echo "Please refer to the section \"Obtaining a client secret from Keycloak\" in the README.md in the current directory."
      exit 1
    fi
  fi


  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-dcbr}"

  export STI_SCRIPTS_PATH=${STI_SCRIPTS_PATH:-/usr/libexec/s2i}

  # dcbr-db
  export POSTGRESQL_DATABASE="DCBR"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"

  # schema-spy
  export DATABASE_SERVICE_NAME="dcbr-db"
  export POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
  export POSTGRESQL_USER=${POSTGRESQL_USER}
  export POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}

  # dcbr-api
  export DATABASE_SERVICE_HOST="dcbr-db"
  export DATABASE_SERVICE_PORT=5432
  export DATABASE_NAME=${POSTGRESQL_DATABASE}
  export DATABASE_USER=${POSTGRESQL_USER}
  export DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  export DEBUG=${DEBUG}
  export DJANGO_SECRET_KEY="(0y1vy1z!l&8n*0t7m#f_7$o$jb%xwswka)30$^90z!8wy(i23"
  export DJANGO_DEBUG=True
  export DJANGO_ADMIN_USER="admin"
  export DJANGO_ADMIN_PASSWORD="admin"
  export DJANGO_ADMIN_EMAIL="dcbr-admin@gov.bc.ca"
  export OIDC_RP_CLIENT_ID="dcbr-admin"
  export OIDC_RP_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
  export OIDC_RP_SIGN_ALGO="RS256"
  export OIDC_OP_AUTHORIZATION_ENDPOINT="https://sso-dev.pathfinder.gov.bc.ca/auth/realms/uicn0kkh/protocol/openid-connect/auth"
  export OIDC_OP_TOKEN_ENDPOINT="https://sso-dev.pathfinder.gov.bc.ca/auth/realms/uicn0kkh/protocol/openid-connect/token"
  export OIDC_OP_USER_ENDPOINT="https://sso-dev.pathfinder.gov.bc.ca/auth/realms/uicn0kkh/protocol/openid-connect/userinfo"
  export OIDC_OP_JWKS_ENDPOINT="https://sso-dev.pathfinder.gov.bc.ca/auth/realms/uicn0kkh/protocol/openid-connect/certs"
  export KEYCLOAK_PUBLIC_AUTH_URL="https://sso-dev.pathfinder.gov.bc.ca/auth"
  export KEYCLOAK_PUBLIC_CLIENT_ID="dcbr-web"
  export KEYCLOAK_PUBLIC_REALM="uicn0kkh"

  # keycloak-db
  export KEYCLOAK_DB_NAME="keycloak"
  export KEYCLOAK_DB_USER="keycloak"
  export KEYCLOAK_DB_PASSWORD="keycloak"

  # keycloak
  export KEYCLOAK_DB_VENDOR="POSTGRES"
  export KEYCLOAK_DB_ADDR="keycloak-db"
  export KEYCLOAK_USER="dcbr-admin"
  export KEYCLOAK_PASSWORD="dcbr-admin"
  export KEYCLOAK_LOGLEVEL="WARN"
  export KEYCLOAK_ROOT_LOGLEVEL="WARN"
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start|up)
  unset DEBUG
  DEFAULT_CONTAINERS="dcbr-web  $DEFAULT_CONTAINERS"
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-dev)
  export DEBUG=true
  DEFAULT_CONTAINERS="dcbr-web-dev  $DEFAULT_CONTAINERS"
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-api)
  export DEBUG=true
  DEFAULT_CONTAINERS="dcbr-api dcbr-db"
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
makemigrations)
  configureEnvironment $@
  export DATABASE_SERVICE_HOST="localhost"
  cd ../dcbr-api && python manage.py makemigrations $@
 ;;
migrate)
  configureEnvironment $@
  export DATABASE_SERVICE_HOST="localhost"
  cd ../dcbr-api && python manage.py migrate
 ;;
logs)
  configureEnvironment $@
  docker-compose logs -f
  ;;
stop)
  DEFAULT_CONTAINERS="dcbr-web dcbr-web-dev  $DEFAULT_CONTAINERS"
  configureEnvironment
  docker-compose stop 
  ;;
rm|down)
  configureEnvironment
  deleteVolumes
  ;;
build)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  case "$@" in
  dcbr-api)
    build-api
    ;;
  dcbr-web)
    build-web
    ;;
  *)
    buildImages
    ;;
  esac
  ;;
*)
  usage
  ;;
esac

popd >/dev/null
